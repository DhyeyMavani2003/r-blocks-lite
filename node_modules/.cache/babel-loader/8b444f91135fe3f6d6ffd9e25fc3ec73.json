{"ast":null,"code":"// Do not edit this file; automatically generated.\n\n/* eslint-disable */\n;\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([\"./blockly_compressed.js\"], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require(\"./blockly_compressed.js\"));\n  } else {\n    // Browser\n    root.Blockly.JavaScript = factory(root.Blockly);\n  }\n})(this, function (Blockly) {\n  const $ = Blockly.internal_;\n  var module$contents$Blockly$JavaScript_JavaScript = new $.module$exports$Blockly$Generator.Generator(\"JavaScript\");\n  module$contents$Blockly$JavaScript_JavaScript.addReservedWords(\"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments,\" + Object.getOwnPropertyNames($.module$exports$Blockly$utils$global.globalThis).join(\",\"));\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_ATOMIC = 0;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_NEW = 1.1;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_MEMBER = 1.2;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_FUNCTION_CALL = 2;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_INCREMENT = 3;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_DECREMENT = 3;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_BITWISE_NOT = 4.1;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_UNARY_PLUS = 4.2;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_UNARY_NEGATION = 4.3;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_NOT = 4.4;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_TYPEOF = 4.5;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_VOID = 4.6;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_DELETE = 4.7;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_AWAIT = 4.8;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_EXPONENTIATION = 5;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_MULTIPLICATION = 5.1;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_DIVISION = 5.2;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_MODULUS = 5.3;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_SUBTRACTION = 6.1;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_ADDITION = 6.2;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_BITWISE_SHIFT = 7;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_RELATIONAL = 8;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_IN = 8;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_INSTANCEOF = 8;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_EQUALITY = 9;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_BITWISE_AND = 10;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_BITWISE_XOR = 11;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_BITWISE_OR = 12;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_AND = 13;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_OR = 14;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_CONDITIONAL = 15;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_ASSIGNMENT = 16;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_YIELD = 17;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_COMMA = 18;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_NONE = 99;\n  module$contents$Blockly$JavaScript_JavaScript.ORDER_OVERRIDES = [[module$contents$Blockly$JavaScript_JavaScript.ORDER_FUNCTION_CALL, module$contents$Blockly$JavaScript_JavaScript.ORDER_MEMBER], [module$contents$Blockly$JavaScript_JavaScript.ORDER_FUNCTION_CALL, module$contents$Blockly$JavaScript_JavaScript.ORDER_FUNCTION_CALL], [module$contents$Blockly$JavaScript_JavaScript.ORDER_MEMBER, module$contents$Blockly$JavaScript_JavaScript.ORDER_MEMBER], [module$contents$Blockly$JavaScript_JavaScript.ORDER_MEMBER, module$contents$Blockly$JavaScript_JavaScript.ORDER_FUNCTION_CALL], [module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_NOT, module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_NOT], [module$contents$Blockly$JavaScript_JavaScript.ORDER_MULTIPLICATION, module$contents$Blockly$JavaScript_JavaScript.ORDER_MULTIPLICATION], [module$contents$Blockly$JavaScript_JavaScript.ORDER_ADDITION, module$contents$Blockly$JavaScript_JavaScript.ORDER_ADDITION], [module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_AND, module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_AND], [module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_OR, module$contents$Blockly$JavaScript_JavaScript.ORDER_LOGICAL_OR]];\n  module$contents$Blockly$JavaScript_JavaScript.isInitialized = !1;\n\n  module$contents$Blockly$JavaScript_JavaScript.init = function (a) {\n    Object.getPrototypeOf(this).init.call(this);\n    this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new $.module$exports$Blockly$Names.Names(this.RESERVED_WORDS_);\n    this.nameDB_.setVariableMap(a.getVariableMap());\n    this.nameDB_.populateVariables(a);\n    this.nameDB_.populateProcedures(a);\n\n    for (var b = [], c = (0, $.module$exports$Blockly$Variables.allDeveloperVariables)(a), d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], $.module$exports$Blockly$Names.NameType.DEVELOPER_VARIABLE));\n\n    a = (0, $.module$exports$Blockly$Variables.allUsedVarModels)(a);\n\n    for (c = 0; c < a.length; c++) b.push(this.nameDB_.getName(a[c].getId(), $.module$exports$Blockly$Names.NameType.VARIABLE));\n\n    b.length && (this.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n    this.isInitialized = !0;\n  };\n\n  module$contents$Blockly$JavaScript_JavaScript.finish = function (a) {\n    var b = (0, $.module$exports$Blockly$utils$object.values)(this.definitions_);\n    a = Object.getPrototypeOf(this).finish.call(this, a);\n    this.isInitialized = !1;\n    this.nameDB_.reset();\n    return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n  };\n\n  module$contents$Blockly$JavaScript_JavaScript.scrubNakedValue = function (a) {\n    return a + \";\\n\";\n  };\n\n  module$contents$Blockly$JavaScript_JavaScript.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n    return \"'\" + a + \"'\";\n  };\n\n  module$contents$Blockly$JavaScript_JavaScript.multiline_quote_ = function (a) {\n    return a.split(/\\n/g).map(this.quote_).join(\" + '\\\\n' +\\n\");\n  };\n\n  module$contents$Blockly$JavaScript_JavaScript.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      e && (e = (0, $.module$exports$Blockly$utils$string.wrap)(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + \"\\n\", \"// \"));\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type === $.module$exports$Blockly$inputTypes.inputTypes.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, \"// \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : this.blockToCode(a);\n    return d + b + c;\n  };\n\n  module$contents$Blockly$JavaScript_JavaScript.getAdjusted = function (a, b, c, d, e) {\n    c = c || 0;\n    e = e || this.ORDER_NONE;\n    a.workspace.options.oneBasedIndex && c--;\n    var f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\",\n        g = e;\n    if (0 < c) var h = g = this.ORDER_ADDITION;else 0 > c ? h = g = this.ORDER_SUBTRACTION : d && (h = g = this.ORDER_UNARY_NEGATION);\n    a = this.valueToCode(a, b, g) || f;\n    (0, $.module$exports$Blockly$utils$string.isNumber)(a) ? (a = Number(a) + c, d && (a = -a)) : (0 < c ? a = a + \" + \" + c : 0 > c && (a = a + \" - \" + -c), d && (a = c ? \"-(\" + a + \")\" : \"-\" + a), h = Math.floor(h), e = Math.floor(e), h && e >= h && (a = \"(\" + a + \")\"));\n    return a;\n  };\n\n  $.Blockly.JavaScript = module$contents$Blockly$JavaScript_JavaScript;\n  var module$exports$Blockly$JavaScript$variables = {};\n\n  $.Blockly.JavaScript.variables_get = function (a) {\n    return [$.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"VAR\"), $.module$exports$Blockly$Names.NameType.VARIABLE), $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.variables_set = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\";\n    return $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"VAR\"), $.module$exports$Blockly$Names.NameType.VARIABLE) + \" = \" + b + \";\\n\";\n  };\n\n  var module$exports$Blockly$JavaScript$variablesDynamic = {};\n  $.Blockly.JavaScript.variables_get_dynamic = $.Blockly.JavaScript.variables_get;\n  $.Blockly.JavaScript.variables_set_dynamic = $.Blockly.JavaScript.variables_set;\n\n  var module$exports$Blockly$JavaScript$texts = {},\n      module$contents$Blockly$JavaScript$texts_strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/,\n      module$contents$Blockly$JavaScript$texts_forceString = function (a) {\n    return module$contents$Blockly$JavaScript$texts_strRegExp.test(a) ? [a, $.Blockly.JavaScript.ORDER_ATOMIC] : [\"String(\" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  },\n      module$contents$Blockly$JavaScript$texts_getSubstringIndex = function (a, b, c) {\n    return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n  };\n\n  $.Blockly.JavaScript.text = function (a) {\n    return [$.Blockly.JavaScript.quote_(a.getFieldValue(\"TEXT\")), $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.text_multiline = function (a) {\n    a = $.Blockly.JavaScript.multiline_quote_(a.getFieldValue(\"TEXT\"));\n    var b = -1 !== a.indexOf(\"+\") ? $.Blockly.JavaScript.ORDER_ADDITION : $.Blockly.JavaScript.ORDER_ATOMIC;\n    return [a, b];\n  };\n\n  $.Blockly.JavaScript.text_join = function (a) {\n    switch (a.itemCount_) {\n      case 0:\n        return [\"''\", $.Blockly.JavaScript.ORDER_ATOMIC];\n\n      case 1:\n        return a = $.Blockly.JavaScript.valueToCode(a, \"ADD0\", $.Blockly.JavaScript.ORDER_NONE) || \"''\", module$contents$Blockly$JavaScript$texts_forceString(a);\n\n      case 2:\n        var b = $.Blockly.JavaScript.valueToCode(a, \"ADD0\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n        a = $.Blockly.JavaScript.valueToCode(a, \"ADD1\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n        return [module$contents$Blockly$JavaScript$texts_forceString(b)[0] + \" + \" + module$contents$Blockly$JavaScript$texts_forceString(a)[0], $.Blockly.JavaScript.ORDER_ADDITION];\n\n      default:\n        b = Array(a.itemCount_);\n\n        for (var c = 0; c < a.itemCount_; c++) b[c] = $.Blockly.JavaScript.valueToCode(a, \"ADD\" + c, $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n\n        return [\"[\" + b.join(\",\") + \"].join('')\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n    }\n  };\n\n  $.Blockly.JavaScript.text_append = function (a) {\n    var b = $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"VAR\"), $.module$exports$Blockly$Names.NameType.VARIABLE);\n    a = $.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return b + \" += \" + module$contents$Blockly$JavaScript$texts_forceString(a)[0] + \";\\n\";\n  };\n\n  $.Blockly.JavaScript.text_length = function (a) {\n    return [($.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".length\", $.Blockly.JavaScript.ORDER_MEMBER];\n  };\n\n  $.Blockly.JavaScript.text_isEmpty = function (a) {\n    return [\"!\" + ($.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".length\", $.Blockly.JavaScript.ORDER_LOGICAL_NOT];\n  };\n\n  $.Blockly.JavaScript.text_indexOf = function (a) {\n    var b = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"FIND\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    b = ($.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", $.Blockly.JavaScript.ORDER_ADDITION] : [b, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"VALUE\", \"RANDOM\" === b ? $.Blockly.JavaScript.ORDER_NONE : $.Blockly.JavaScript.ORDER_MEMBER) || \"''\";\n\n    switch (b) {\n      case \"FIRST\":\n        return [c + \".charAt(0)\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"LAST\":\n        return [c + \".slice(-1)\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"FROM_START\":\n        return a = $.Blockly.JavaScript.getAdjusted(a, \"AT\"), [c + \".charAt(\" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"FROM_END\":\n        return a = $.Blockly.JavaScript.getAdjusted(a, \"AT\", 1, !0), [c + \".slice(\" + a + \").charAt(0)\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"RANDOM\":\n        return [$.Blockly.JavaScript.provideFunction_(\"textRandomLetter\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(text) {\", \"  var x = Math.floor(Math.random() * text.length);\", \"  return text[x];\", \"}\"]) + \"(\" + c + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n    }\n\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n\n  $.Blockly.JavaScript.text_getSubstring = function (a) {\n    var b = a.getFieldValue(\"WHERE1\"),\n        c = a.getFieldValue(\"WHERE2\"),\n        d = \"FROM_END\" !== b && \"LAST\" !== b && \"FROM_END\" !== c && \"LAST\" !== c,\n        e = $.Blockly.JavaScript.valueToCode(a, \"STRING\", d ? $.Blockly.JavaScript.ORDER_MEMBER : $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    if (\"FIRST\" === b && \"LAST\" === c) return [e, $.Blockly.JavaScript.ORDER_NONE];\n\n    if (e.match(/^'?\\w+'?$/) || d) {\n      switch (b) {\n        case \"FROM_START\":\n          b = $.Blockly.JavaScript.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          b = $.Blockly.JavaScript.getAdjusted(a, \"AT1\", 1, !1, $.Blockly.JavaScript.ORDER_SUBTRACTION);\n          b = e + \".length - \" + b;\n          break;\n\n        case \"FIRST\":\n          b = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n\n      switch (c) {\n        case \"FROM_START\":\n          c = $.Blockly.JavaScript.getAdjusted(a, \"AT2\", 1);\n          break;\n\n        case \"FROM_END\":\n          c = $.Blockly.JavaScript.getAdjusted(a, \"AT2\", 0, !1, $.Blockly.JavaScript.ORDER_SUBTRACTION);\n          c = e + \".length - \" + c;\n          break;\n\n        case \"LAST\":\n          c = e + \".length\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n\n      e = e + \".slice(\" + b + \", \" + c + \")\";\n    } else {\n      d = $.Blockly.JavaScript.getAdjusted(a, \"AT1\");\n      a = $.Blockly.JavaScript.getAdjusted(a, \"AT2\");\n      var f = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      e = $.Blockly.JavaScript.provideFunction_(\"subsequence\" + f[b] + f[c], [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(sequence\" + (\"FROM_END\" === b || \"FROM_START\" === b ? \", at1\" : \"\") + (\"FROM_END\" === c || \"FROM_START\" === c ? \", at2\" : \"\") + \") {\", \"  var start = \" + module$contents$Blockly$JavaScript$texts_getSubstringIndex(\"sequence\", b, \"at1\") + \";\", \"  var end = \" + module$contents$Blockly$JavaScript$texts_getSubstringIndex(\"sequence\", c, \"at2\") + \" + 1;\", \"  return sequence.slice(start, end);\", \"}\"]) + \"(\" + e + (\"FROM_END\" === b || \"FROM_START\" === b ? \", \" + d : \"\") + (\"FROM_END\" === c || \"FROM_START\" === c ? \", \" + a : \"\") + \")\";\n    }\n\n    return [e, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_changeCase = function (a) {\n    var b = {\n      UPPERCASE: \".toUpperCase()\",\n      LOWERCASE: \".toLowerCase()\",\n      TITLECASE: null\n    }[a.getFieldValue(\"CASE\")];\n    a = $.Blockly.JavaScript.valueToCode(a, \"TEXT\", b ? $.Blockly.JavaScript.ORDER_MEMBER : $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return [b ? a + b : $.Blockly.JavaScript.provideFunction_(\"textToTitleCase\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(str) {\", \"  return str.replace(/\\\\S+/g,\", \"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\", \"}\"]) + \"(\" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_trim = function (a) {\n    var b = {\n      LEFT: \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n      RIGHT: \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n      BOTH: \".trim()\"\n    }[a.getFieldValue(\"MODE\")];\n    return [($.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_MEMBER) || \"''\") + b, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_print = function (a) {\n    return \"window.alert(\" + ($.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_NONE) || \"''\") + \");\\n\";\n  };\n\n  $.Blockly.JavaScript.text_prompt_ext = function (a) {\n    var b = \"window.prompt(\" + (a.getField(\"TEXT\") ? $.Blockly.JavaScript.quote_(a.getFieldValue(\"TEXT\")) : $.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_NONE) || \"''\") + \")\";\n    \"NUMBER\" === a.getFieldValue(\"TYPE\") && (b = \"Number(\" + b + \")\");\n    return [b, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_prompt = $.Blockly.JavaScript.text_prompt_ext;\n\n  $.Blockly.JavaScript.text_count = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"SUB\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return [$.Blockly.JavaScript.provideFunction_(\"textCount\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(haystack, needle) {\", \"  if (needle.length === 0) {\", \"    return haystack.length + 1;\", \"  } else {\", \"    return haystack.split(needle).length - 1;\", \"  }\", \"}\"]) + \"(\" + b + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_replace = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_NONE) || \"''\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"FROM\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"TO\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return [$.Blockly.JavaScript.provideFunction_(\"textReplace\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(haystack, needle, replacement) {\", '  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g,\"\\\\\\\\$1\")', '                 .replace(/\\\\x08/g,\"\\\\\\\\x08\");', \"  return haystack.replace(new RegExp(needle, 'g'), replacement);\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.text_reverse = function (a) {\n    return [($.Blockly.JavaScript.valueToCode(a, \"TEXT\", $.Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".split('').reverse().join('')\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  var module$exports$Blockly$JavaScript$procedures = {};\n\n  $.Blockly.JavaScript.procedures_defreturn = function (a) {\n    var b = $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"NAME\"), $.module$exports$Blockly$Names.NameType.PROCEDURE),\n        c = \"\";\n    $.Blockly.JavaScript.STATEMENT_PREFIX && (c += $.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_PREFIX, a));\n    $.Blockly.JavaScript.STATEMENT_SUFFIX && (c += $.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_SUFFIX, a));\n    c && (c = $.Blockly.JavaScript.prefixLines(c, $.Blockly.JavaScript.INDENT));\n    var d = \"\";\n    $.Blockly.JavaScript.INFINITE_LOOP_TRAP && (d = $.Blockly.JavaScript.prefixLines($.Blockly.JavaScript.injectId($.Blockly.JavaScript.INFINITE_LOOP_TRAP, a), $.Blockly.JavaScript.INDENT));\n    var e = $.Blockly.JavaScript.statementToCode(a, \"STACK\"),\n        f = $.Blockly.JavaScript.valueToCode(a, \"RETURN\", $.Blockly.JavaScript.ORDER_NONE) || \"\",\n        g = \"\";\n    e && f && (g = c);\n    f && (f = $.Blockly.JavaScript.INDENT + \"return \" + f + \";\\n\");\n\n    for (var h = [], k = a.getVars(), l = 0; l < k.length; l++) h[l] = $.Blockly.JavaScript.nameDB_.getName(k[l], $.module$exports$Blockly$Names.NameType.VARIABLE);\n\n    c = \"function \" + b + \"(\" + h.join(\", \") + \") {\\n\" + c + d + e + g + f + \"}\";\n    c = $.Blockly.JavaScript.scrub_(a, c);\n    $.Blockly.JavaScript.definitions_[\"%\" + b] = c;\n    return null;\n  };\n\n  $.Blockly.JavaScript.procedures_defnoreturn = $.Blockly.JavaScript.procedures_defreturn;\n\n  $.Blockly.JavaScript.procedures_callreturn = function (a) {\n    for (var b = $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"NAME\"), $.module$exports$Blockly$Names.NameType.PROCEDURE), c = [], d = a.getVars(), e = 0; e < d.length; e++) c[e] = $.Blockly.JavaScript.valueToCode(a, \"ARG\" + e, $.Blockly.JavaScript.ORDER_NONE) || \"null\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.procedures_callnoreturn = function (a) {\n    return $.Blockly.JavaScript.procedures_callreturn(a)[0] + \";\\n\";\n  };\n\n  $.Blockly.JavaScript.procedures_ifreturn = function (a) {\n    var b = \"if (\" + ($.Blockly.JavaScript.valueToCode(a, \"CONDITION\", $.Blockly.JavaScript.ORDER_NONE) || \"false\") + \") {\\n\";\n    $.Blockly.JavaScript.STATEMENT_SUFFIX && (b += $.Blockly.JavaScript.prefixLines($.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_SUFFIX, a), $.Blockly.JavaScript.INDENT));\n    a.hasReturnValue_ ? (a = $.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_NONE) || \"null\", b += $.Blockly.JavaScript.INDENT + \"return \" + a + \";\\n\") : b += $.Blockly.JavaScript.INDENT + \"return;\\n\";\n    return b + \"}\\n\";\n  };\n\n  var module$exports$Blockly$JavaScript$math = {};\n\n  $.Blockly.JavaScript.math_number = function (a) {\n    a = Number(a.getFieldValue(\"NUM\"));\n    return [a, 0 <= a ? $.Blockly.JavaScript.ORDER_ATOMIC : $.Blockly.JavaScript.ORDER_UNARY_NEGATION];\n  };\n\n  $.Blockly.JavaScript.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", $.Blockly.JavaScript.ORDER_ADDITION],\n      MINUS: [\" - \", $.Blockly.JavaScript.ORDER_SUBTRACTION],\n      MULTIPLY: [\" * \", $.Blockly.JavaScript.ORDER_MULTIPLICATION],\n      DIVIDE: [\" / \", $.Blockly.JavaScript.ORDER_DIVISION],\n      POWER: [null, $.Blockly.JavaScript.ORDER_NONE]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = $.Blockly.JavaScript.valueToCode(a, \"A\", b) || \"0\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"B\", b) || \"0\";\n    return c ? [d + c + a, b] : [\"Math.pow(\" + d + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    if (\"NEG\" === b) return a = $.Blockly.JavaScript.valueToCode(a, \"NUM\", $.Blockly.JavaScript.ORDER_UNARY_NEGATION) || \"0\", \"-\" === a[0] && (a = \" \" + a), [\"-\" + a, $.Blockly.JavaScript.ORDER_UNARY_NEGATION];\n    a = \"SIN\" === b || \"COS\" === b || \"TAN\" === b ? $.Blockly.JavaScript.valueToCode(a, \"NUM\", $.Blockly.JavaScript.ORDER_DIVISION) || \"0\" : $.Blockly.JavaScript.valueToCode(a, \"NUM\", $.Blockly.JavaScript.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        var c = \"Math.abs(\" + a + \")\";\n        break;\n\n      case \"ROOT\":\n        c = \"Math.sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        c = \"Math.log(\" + a + \")\";\n        break;\n\n      case \"EXP\":\n        c = \"Math.exp(\" + a + \")\";\n        break;\n\n      case \"POW10\":\n        c = \"Math.pow(10,\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        c = \"Math.round(\" + a + \")\";\n        break;\n\n      case \"ROUNDUP\":\n        c = \"Math.ceil(\" + a + \")\";\n        break;\n\n      case \"ROUNDDOWN\":\n        c = \"Math.floor(\" + a + \")\";\n        break;\n\n      case \"SIN\":\n        c = \"Math.sin(\" + a + \" / 180 * Math.PI)\";\n        break;\n\n      case \"COS\":\n        c = \"Math.cos(\" + a + \" / 180 * Math.PI)\";\n        break;\n\n      case \"TAN\":\n        c = \"Math.tan(\" + a + \" / 180 * Math.PI)\";\n    }\n\n    if (c) return [c, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n    switch (b) {\n      case \"LOG10\":\n        c = \"Math.log(\" + a + \") / Math.log(10)\";\n        break;\n\n      case \"ASIN\":\n        c = \"Math.asin(\" + a + \") / Math.PI * 180\";\n        break;\n\n      case \"ACOS\":\n        c = \"Math.acos(\" + a + \") / Math.PI * 180\";\n        break;\n\n      case \"ATAN\":\n        c = \"Math.atan(\" + a + \") / Math.PI * 180\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [c, $.Blockly.JavaScript.ORDER_DIVISION];\n  };\n\n  $.Blockly.JavaScript.math_constant = function (a) {\n    return {\n      PI: [\"Math.PI\", $.Blockly.JavaScript.ORDER_MEMBER],\n      E: [\"Math.E\", $.Blockly.JavaScript.ORDER_MEMBER],\n      GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", $.Blockly.JavaScript.ORDER_DIVISION],\n      SQRT2: [\"Math.SQRT2\", $.Blockly.JavaScript.ORDER_MEMBER],\n      SQRT1_2: [\"Math.SQRT1_2\", $.Blockly.JavaScript.ORDER_MEMBER],\n      INFINITY: [\"Infinity\", $.Blockly.JavaScript.ORDER_ATOMIC]\n    }[a.getFieldValue(\"CONSTANT\")];\n  };\n\n  $.Blockly.JavaScript.math_number_property = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"NUMBER_TO_CHECK\", $.Blockly.JavaScript.ORDER_MODULUS) || \"0\",\n        c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" === c) return [$.Blockly.JavaScript.provideFunction_(\"mathIsPrime\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(n) {\", \"  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  if (n == 2 || n == 3) {\", \"    return true;\", \"  }\", \"  // False if n is NaN, negative, is 1, or not whole.\", \"  // And false if n is divisible by 2 or 3.\", \"  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\", \"    return false;\", \"  }\", \"  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\", \"    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\", \"      return false;\", \"    }\", \"  }\", \"  return true;\", \"}\"]) + \"(\" + b + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 === 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 === 1\";\n        break;\n\n      case \"WHOLE\":\n        d = b + \" % 1 === 0\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = $.Blockly.JavaScript.valueToCode(a, \"DIVISOR\", $.Blockly.JavaScript.ORDER_MODULUS) || \"0\", d = b + \" % \" + a + \" === 0\";\n    }\n\n    return [d, $.Blockly.JavaScript.ORDER_EQUALITY];\n  };\n\n  $.Blockly.JavaScript.math_change = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"DELTA\", $.Blockly.JavaScript.ORDER_ADDITION) || \"0\";\n    a = $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"VAR\"), $.module$exports$Blockly$Names.NameType.VARIABLE);\n    return a + \" = (typeof \" + a + \" === 'number' ? \" + a + \" : 0) + \" + b + \";\\n\";\n  };\n\n  $.Blockly.JavaScript.math_round = $.Blockly.JavaScript.math_single;\n  $.Blockly.JavaScript.math_trig = $.Blockly.JavaScript.math_single;\n\n  $.Blockly.JavaScript.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n\n    switch (b) {\n      case \"SUM\":\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\";\n        a += \".reduce(function(x, y) {return x + y;})\";\n        break;\n\n      case \"MIN\":\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = \"Math.min.apply(null, \" + a + \")\";\n        break;\n\n      case \"MAX\":\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = \"Math.max.apply(null, \" + a + \")\";\n        break;\n\n      case \"AVERAGE\":\n        b = $.Blockly.JavaScript.provideFunction_(\"mathMean\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(myList) {\", \"  return myList.reduce(function(x, y) {return x + y;}) / myList.length;\", \"}\"]);\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"MEDIAN\":\n        b = $.Blockly.JavaScript.provideFunction_(\"mathMedian\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(myList) {\", \"  var localList = myList.filter(function (x) {return typeof x === 'number';});\", \"  if (!localList.length) return null;\", \"  localList.sort(function(a, b) {return b - a;});\", \"  if (localList.length % 2 === 0) {\", \"    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\", \"  } else {\", \"    return localList[(localList.length - 1) / 2];\", \"  }\", \"}\"]);\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"MODE\":\n        b = $.Blockly.JavaScript.provideFunction_(\"mathModes\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(values) {\", \"  var modes = [];\", \"  var counts = [];\", \"  var maxCount = 0;\", \"  for (var i = 0; i < values.length; i++) {\", \"    var value = values[i];\", \"    var found = false;\", \"    var thisCount;\", \"    for (var j = 0; j < counts.length; j++) {\", \"      if (counts[j][0] === value) {\", \"        thisCount = ++counts[j][1];\", \"        found = true;\", \"        break;\", \"      }\", \"    }\", \"    if (!found) {\", \"      counts.push([value, 1]);\", \"      thisCount = 1;\", \"    }\", \"    maxCount = Math.max(thisCount, maxCount);\", \"  }\", \"  for (var j = 0; j < counts.length; j++) {\", \"    if (counts[j][1] === maxCount) {\", \"        modes.push(counts[j][0]);\", \"    }\", \"  }\", \"  return modes;\", \"}\"]);\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"STD_DEV\":\n        b = $.Blockly.JavaScript.provideFunction_(\"mathStandardDeviation\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(numbers) {\", \"  var n = numbers.length;\", \"  if (!n) return null;\", \"  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\", \"  var variance = 0;\", \"  for (var j = 0; j < n; j++) {\", \"    variance += Math.pow(numbers[j] - mean, 2);\", \"  }\", \"  variance = variance / n;\", \"  return Math.sqrt(variance);\", \"}\"]);\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"RANDOM\":\n        b = $.Blockly.JavaScript.provideFunction_(\"mathRandomList\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(list) {\", \"  var x = Math.floor(Math.random() * list.length);\", \"  return list[x];\", \"}\"]);\n        a = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n\n    return [a, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.math_modulo = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"DIVIDEND\", $.Blockly.JavaScript.ORDER_MODULUS) || \"0\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"DIVISOR\", $.Blockly.JavaScript.ORDER_MODULUS) || \"0\";\n    return [b + \" % \" + a, $.Blockly.JavaScript.ORDER_MODULUS];\n  };\n\n  $.Blockly.JavaScript.math_constrain = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_NONE) || \"0\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"LOW\", $.Blockly.JavaScript.ORDER_NONE) || \"0\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"HIGH\", $.Blockly.JavaScript.ORDER_NONE) || \"Infinity\";\n    return [\"Math.min(Math.max(\" + b + \", \" + c + \"), \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.math_random_int = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"FROM\", $.Blockly.JavaScript.ORDER_NONE) || \"0\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"TO\", $.Blockly.JavaScript.ORDER_NONE) || \"0\";\n    return [$.Blockly.JavaScript.provideFunction_(\"mathRandomInt\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(a, b) {\", \"  if (a > b) {\", \"    // Swap a and b to ensure a is smaller.\", \"    var c = a;\", \"    a = b;\", \"    b = c;\", \"  }\", \"  return Math.floor(Math.random() * (b - a + 1) + a);\", \"}\"]) + \"(\" + b + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.math_random_float = function (a) {\n    return [\"Math.random()\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.math_atan2 = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"X\", $.Blockly.JavaScript.ORDER_NONE) || \"0\";\n    return [\"Math.atan2(\" + ($.Blockly.JavaScript.valueToCode(a, \"Y\", $.Blockly.JavaScript.ORDER_NONE) || \"0\") + \", \" + b + \") / Math.PI * 180\", $.Blockly.JavaScript.ORDER_DIVISION];\n  };\n\n  var module$exports$Blockly$JavaScript$loops = {};\n\n  $.Blockly.JavaScript.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : $.Blockly.JavaScript.valueToCode(a, \"TIMES\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\";\n    var c = $.Blockly.JavaScript.statementToCode(a, \"DO\");\n    c = $.Blockly.JavaScript.addLoopTrap(c, a);\n    a = \"\";\n    var d = $.Blockly.JavaScript.nameDB_.getDistinctName(\"count\", $.module$exports$Blockly$Names.NameType.VARIABLE),\n        e = b;\n    b.match(/^\\w+$/) || (0, $.module$exports$Blockly$utils$string.isNumber)(b) || (e = $.Blockly.JavaScript.nameDB_.getDistinctName(\"repeat_end\", $.module$exports$Blockly$Names.NameType.VARIABLE), a += \"var \" + e + \" = \" + b + \";\\n\");\n    return a + (\"for (var \" + d + \" = 0; \" + d + \" < \" + e + \"; \" + d + \"++) {\\n\" + c + \"}\\n\");\n  };\n\n  $.Blockly.JavaScript.controls_repeat = $.Blockly.JavaScript.controls_repeat_ext;\n\n  $.Blockly.JavaScript.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" === a.getFieldValue(\"MODE\"),\n        c = $.Blockly.JavaScript.valueToCode(a, \"BOOL\", b ? $.Blockly.JavaScript.ORDER_LOGICAL_NOT : $.Blockly.JavaScript.ORDER_NONE) || \"false\",\n        d = $.Blockly.JavaScript.statementToCode(a, \"DO\");\n    d = $.Blockly.JavaScript.addLoopTrap(d, a);\n    b && (c = \"!\" + c);\n    return \"while (\" + c + \") {\\n\" + d + \"}\\n\";\n  };\n\n  $.Blockly.JavaScript.controls_for = function (a) {\n    var b = $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"VAR\"), $.module$exports$Blockly$Names.NameType.VARIABLE),\n        c = $.Blockly.JavaScript.valueToCode(a, \"FROM\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\",\n        d = $.Blockly.JavaScript.valueToCode(a, \"TO\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\",\n        e = $.Blockly.JavaScript.valueToCode(a, \"BY\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"1\",\n        f = $.Blockly.JavaScript.statementToCode(a, \"DO\");\n    f = $.Blockly.JavaScript.addLoopTrap(f, a);\n\n    if ((0, $.module$exports$Blockly$utils$string.isNumber)(c) && (0, $.module$exports$Blockly$utils$string.isNumber)(d) && (0, $.module$exports$Blockly$utils$string.isNumber)(e)) {\n      var g = Number(c) <= Number(d);\n      a = \"for (\" + b + \" = \" + c + \"; \" + b + (g ? \" <= \" : \" >= \") + d + \"; \" + b;\n      b = Math.abs(Number(e));\n      a = (1 === b ? a + (g ? \"++\" : \"--\") : a + ((g ? \" += \" : \" -= \") + b)) + (\") {\\n\" + f + \"}\\n\");\n    } else a = \"\", g = c, c.match(/^\\w+$/) || (0, $.module$exports$Blockly$utils$string.isNumber)(c) || (g = $.Blockly.JavaScript.nameDB_.getDistinctName(b + \"_start\", $.module$exports$Blockly$Names.NameType.VARIABLE), a += \"var \" + g + \" = \" + c + \";\\n\"), c = d, d.match(/^\\w+$/) || (0, $.module$exports$Blockly$utils$string.isNumber)(d) || (c = $.Blockly.JavaScript.nameDB_.getDistinctName(b + \"_end\", $.module$exports$Blockly$Names.NameType.VARIABLE), a += \"var \" + c + \" = \" + d + \";\\n\"), d = $.Blockly.JavaScript.nameDB_.getDistinctName(b + \"_inc\", $.module$exports$Blockly$Names.NameType.VARIABLE), a += \"var \" + d + \" = \", a = (0, $.module$exports$Blockly$utils$string.isNumber)(e) ? a + (Math.abs(e) + \";\\n\") : a + (\"Math.abs(\" + e + \");\\n\"), a = a + (\"if (\" + g + \" > \" + c + \") {\\n\") + ($.Blockly.JavaScript.INDENT + d + \" = -\" + d + \";\\n\"), a += \"}\\n\", a += \"for (\" + b + \" = \" + g + \"; \" + d + \" >= 0 ? \" + b + \" <= \" + c + \" : \" + b + \" >= \" + c + \"; \" + b + \" += \" + d + \") {\\n\" + f + \"}\\n\";\n\n    return a;\n  };\n\n  $.Blockly.JavaScript.controls_forEach = function (a) {\n    var b = $.Blockly.JavaScript.nameDB_.getName(a.getFieldValue(\"VAR\"), $.module$exports$Blockly$Names.NameType.VARIABLE),\n        c = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"[]\",\n        d = $.Blockly.JavaScript.statementToCode(a, \"DO\");\n    d = $.Blockly.JavaScript.addLoopTrap(d, a);\n    a = \"\";\n    var e = c;\n    c.match(/^\\w+$/) || (e = $.Blockly.JavaScript.nameDB_.getDistinctName(b + \"_list\", $.module$exports$Blockly$Names.NameType.VARIABLE), a += \"var \" + e + \" = \" + c + \";\\n\");\n    c = $.Blockly.JavaScript.nameDB_.getDistinctName(b + \"_index\", $.module$exports$Blockly$Names.NameType.VARIABLE);\n    d = $.Blockly.JavaScript.INDENT + b + \" = \" + e + \"[\" + c + \"];\\n\" + d;\n    return a + (\"for (var \" + c + \" in \" + e + \") {\\n\" + d + \"}\\n\");\n  };\n\n  $.Blockly.JavaScript.controls_flow_statements = function (a) {\n    var b = \"\";\n    $.Blockly.JavaScript.STATEMENT_PREFIX && (b += $.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_PREFIX, a));\n    $.Blockly.JavaScript.STATEMENT_SUFFIX && (b += $.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_SUFFIX, a));\n\n    if ($.Blockly.JavaScript.STATEMENT_PREFIX) {\n      var c = a.getSurroundLoop();\n      c && !c.suppressPrefixSuffix && (b += $.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break;\\n\";\n\n      case \"CONTINUE\":\n        return b + \"continue;\\n\";\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  var module$exports$Blockly$JavaScript$logic = {};\n\n  $.Blockly.JavaScript.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    $.Blockly.JavaScript.STATEMENT_PREFIX && (c += $.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_PREFIX, a));\n\n    do {\n      var d = $.Blockly.JavaScript.valueToCode(a, \"IF\" + b, $.Blockly.JavaScript.ORDER_NONE) || \"false\",\n          e = $.Blockly.JavaScript.statementToCode(a, \"DO\" + b);\n      $.Blockly.JavaScript.STATEMENT_SUFFIX && (e = $.Blockly.JavaScript.prefixLines($.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_SUFFIX, a), $.Blockly.JavaScript.INDENT) + e);\n      c += (0 < b ? \" else \" : \"\") + \"if (\" + d + \") {\\n\" + e + \"}\";\n      b++;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || $.Blockly.JavaScript.STATEMENT_SUFFIX) b = $.Blockly.JavaScript.statementToCode(a, \"ELSE\"), $.Blockly.JavaScript.STATEMENT_SUFFIX && (b = $.Blockly.JavaScript.prefixLines($.Blockly.JavaScript.injectId($.Blockly.JavaScript.STATEMENT_SUFFIX, a), $.Blockly.JavaScript.INDENT) + b), c += \" else {\\n\" + b + \"}\";\n    return c + \"\\n\";\n  };\n\n  $.Blockly.JavaScript.controls_ifelse = $.Blockly.JavaScript.controls_if;\n\n  $.Blockly.JavaScript.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"!=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = \"==\" === b || \"!=\" === b ? $.Blockly.JavaScript.ORDER_EQUALITY : $.Blockly.JavaScript.ORDER_RELATIONAL,\n        d = $.Blockly.JavaScript.valueToCode(a, \"A\", c) || \"0\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  $.Blockly.JavaScript.logic_operation = function (a) {\n    var b = \"AND\" === a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        c = \"&&\" === b ? $.Blockly.JavaScript.ORDER_LOGICAL_AND : $.Blockly.JavaScript.ORDER_LOGICAL_OR,\n        d = $.Blockly.JavaScript.valueToCode(a, \"A\", c);\n    a = $.Blockly.JavaScript.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"&&\" === b ? \"true\" : \"false\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"false\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  $.Blockly.JavaScript.logic_negate = function (a) {\n    var b = $.Blockly.JavaScript.ORDER_LOGICAL_NOT;\n    return [\"!\" + ($.Blockly.JavaScript.valueToCode(a, \"BOOL\", b) || \"true\"), b];\n  };\n\n  $.Blockly.JavaScript.logic_boolean = function (a) {\n    return [\"TRUE\" === a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.logic_null = function (a) {\n    return [\"null\", $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.logic_ternary = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"IF\", $.Blockly.JavaScript.ORDER_CONDITIONAL) || \"false\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"THEN\", $.Blockly.JavaScript.ORDER_CONDITIONAL) || \"null\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"ELSE\", $.Blockly.JavaScript.ORDER_CONDITIONAL) || \"null\";\n    return [b + \" ? \" + c + \" : \" + a, $.Blockly.JavaScript.ORDER_CONDITIONAL];\n  };\n\n  var module$exports$Blockly$JavaScript$lists = {};\n\n  $.Blockly.JavaScript.lists_create_empty = function (a) {\n    return [\"[]\", $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = $.Blockly.JavaScript.valueToCode(a, \"ADD\" + c, $.Blockly.JavaScript.ORDER_NONE) || \"null\";\n\n    return [\"[\" + b.join(\", \") + \"]\", $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.lists_repeat = function (a) {\n    var b = $.Blockly.JavaScript.provideFunction_(\"listsRepeat\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(value, n) {\", \"  var array = [];\", \"  for (var i = 0; i < n; i++) {\", \"    array[i] = value;\", \"  }\", \"  return array;\", \"}\"]),\n        c = $.Blockly.JavaScript.valueToCode(a, \"ITEM\", $.Blockly.JavaScript.ORDER_NONE) || \"null\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"NUM\", $.Blockly.JavaScript.ORDER_NONE) || \"0\";\n    return [b + \"(\" + c + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.lists_length = function (a) {\n    return [($.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\") + \".length\", $.Blockly.JavaScript.ORDER_MEMBER];\n  };\n\n  $.Blockly.JavaScript.lists_isEmpty = function (a) {\n    return [\"!\" + ($.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\") + \".length\", $.Blockly.JavaScript.ORDER_LOGICAL_NOT];\n  };\n\n  $.Blockly.JavaScript.lists_indexOf = function (a) {\n    var b = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"FIND\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    b = ($.Blockly.JavaScript.valueToCode(a, \"VALUE\", $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", $.Blockly.JavaScript.ORDER_ADDITION] : [b, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.lists_getIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\",\n        c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = $.Blockly.JavaScript.valueToCode(a, \"VALUE\", \"RANDOM\" === c ? $.Blockly.JavaScript.ORDER_NONE : $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\";\n\n    switch (c) {\n      case \"FIRST\":\n        if (\"GET\" === b) return [d + \"[0]\", $.Blockly.JavaScript.ORDER_MEMBER];\n        if (\"GET_REMOVE\" === b) return [d + \".shift()\", $.Blockly.JavaScript.ORDER_MEMBER];\n        if (\"REMOVE\" === b) return d + \".shift();\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"GET\" === b) return [d + \".slice(-1)[0]\", $.Blockly.JavaScript.ORDER_MEMBER];\n        if (\"GET_REMOVE\" === b) return [d + \".pop()\", $.Blockly.JavaScript.ORDER_MEMBER];\n        if (\"REMOVE\" === b) return d + \".pop();\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = $.Blockly.JavaScript.getAdjusted(a, \"AT\");\n        if (\"GET\" === b) return [d + \"[\" + a + \"]\", $.Blockly.JavaScript.ORDER_MEMBER];\n        if (\"GET_REMOVE\" === b) return [d + \".splice(\" + a + \", 1)[0]\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" === b) return d + \".splice(\" + a + \", 1);\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = $.Blockly.JavaScript.getAdjusted(a, \"AT\", 1, !0);\n        if (\"GET\" === b) return [d + \".slice(\" + a + \")[0]\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"GET_REMOVE\" === b) return [d + \".splice(\" + a + \", 1)[0]\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" === b) return d + \".splice(\" + a + \", 1);\";\n        break;\n\n      case \"RANDOM\":\n        d = $.Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(list, remove) {\", \"  var x = Math.floor(Math.random() * list.length);\", \"  if (remove) {\", \"    return list.splice(x, 1)[0];\", \"  } else {\", \"    return list[x];\", \"  }\", \"}\"]) + \"(\" + d + \", \" + (\"GET\" !== b) + \")\";\n        if (\"GET\" === b || \"GET_REMOVE\" === b) return [d, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" === b) return d + \";\\n\";\n    }\n\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n\n  $.Blockly.JavaScript.lists_setIndex = function (a) {\n    function b() {\n      if (c.match(/^\\w+$/)) return \"\";\n      var g = $.Blockly.JavaScript.nameDB_.getDistinctName(\"tmpList\", $.module$exports$Blockly$Names.NameType.VARIABLE),\n          h = \"var \" + g + \" = \" + c + \";\\n\";\n      c = g;\n      return h;\n    }\n\n    var c = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\",\n        d = a.getFieldValue(\"MODE\") || \"GET\",\n        e = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        f = $.Blockly.JavaScript.valueToCode(a, \"TO\", $.Blockly.JavaScript.ORDER_ASSIGNMENT) || \"null\";\n\n    switch (e) {\n      case \"FIRST\":\n        if (\"SET\" === d) return c + \"[0] = \" + f + \";\\n\";\n        if (\"INSERT\" === d) return c + \".unshift(\" + f + \");\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"SET\" === d) return b() + (c + \"[\" + c + \".length - 1] = \" + f + \";\\n\");\n        if (\"INSERT\" === d) return c + \".push(\" + f + \");\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = $.Blockly.JavaScript.getAdjusted(a, \"AT\");\n        if (\"SET\" === d) return c + \"[\" + a + \"] = \" + f + \";\\n\";\n        if (\"INSERT\" === d) return c + \".splice(\" + a + \", 0, \" + f + \");\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = $.Blockly.JavaScript.getAdjusted(a, \"AT\", 1, !1, $.Blockly.JavaScript.ORDER_SUBTRACTION);\n        e = b();\n        if (\"SET\" === d) return e + (c + \"[\" + c + \".length - \" + a + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" === d) return e + (c + \".splice(\" + c + \".length - \" + a + \", 0, \" + f + \");\\n\");\n        break;\n\n      case \"RANDOM\":\n        a = b();\n        e = $.Blockly.JavaScript.nameDB_.getDistinctName(\"tmpX\", $.module$exports$Blockly$Names.NameType.VARIABLE);\n        a += \"var \" + e + \" = Math.floor(Math.random() * \" + c + \".length);\\n\";\n        if (\"SET\" === d) return a + (c + \"[\" + e + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" === d) return a + (c + \".splice(\" + e + \", 0, \" + f + \");\\n\");\n    }\n\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n\n  var module$contents$Blockly$JavaScript$lists_getSubstringIndex = function (a, b, c) {\n    return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n  };\n\n  $.Blockly.JavaScript.lists_getSublist = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_MEMBER) || \"[]\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n    if (\"FIRST\" === c && \"LAST\" === d) b += \".slice(0)\";else if (b.match(/^\\w+$/) || \"FROM_END\" !== c && \"FROM_START\" === d) {\n      switch (c) {\n        case \"FROM_START\":\n          c = $.Blockly.JavaScript.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          c = $.Blockly.JavaScript.getAdjusted(a, \"AT1\", 1, !1, $.Blockly.JavaScript.ORDER_SUBTRACTION);\n          c = b + \".length - \" + c;\n          break;\n\n        case \"FIRST\":\n          c = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      switch (d) {\n        case \"FROM_START\":\n          d = $.Blockly.JavaScript.getAdjusted(a, \"AT2\", 1);\n          break;\n\n        case \"FROM_END\":\n          d = $.Blockly.JavaScript.getAdjusted(a, \"AT2\", 0, !1, $.Blockly.JavaScript.ORDER_SUBTRACTION);\n          d = b + \".length - \" + d;\n          break;\n\n        case \"LAST\":\n          d = b + \".length\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      b = b + \".slice(\" + c + \", \" + d + \")\";\n    } else {\n      var e = $.Blockly.JavaScript.getAdjusted(a, \"AT1\");\n      a = $.Blockly.JavaScript.getAdjusted(a, \"AT2\");\n      var f = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      b = $.Blockly.JavaScript.provideFunction_(\"subsequence\" + f[c] + f[d], [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(sequence\" + (\"FROM_END\" === c || \"FROM_START\" === c ? \", at1\" : \"\") + (\"FROM_END\" === d || \"FROM_START\" === d ? \", at2\" : \"\") + \") {\", module$contents$Blockly$JavaScript$lists_getSubstringIndex(\"sequence\", c, \"at1\") + \";\", \"  var end = \" + module$contents$Blockly$JavaScript$lists_getSubstringIndex(\"sequence\", d, \"at2\") + \" + 1;\", \"  return sequence.slice(start, end);\", \"}\"]) + \"(\" + b + (\"FROM_END\" === c || \"FROM_START\" === c ? \", \" + e : \"\") + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + a : \"\") + \")\";\n    }\n    return [b, $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.lists_sort = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL) || \"[]\",\n        c = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n    a = a.getFieldValue(\"TYPE\");\n    var d = $.Blockly.JavaScript.provideFunction_(\"listsGetSortCompare\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(type, direction) {\", \"  var compareFuncs = {\", '    \"NUMERIC\": function(a, b) {', \"        return Number(a) - Number(b); },\", '    \"TEXT\": function(a, b) {', \"        return a.toString() > b.toString() ? 1 : -1; },\", '    \"IGNORE_CASE\": function(a, b) {', \"        return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1; },\", \"  };\", \"  var compare = compareFuncs[type];\", \"  return function(a, b) { return compare(a, b) * direction; }\", \"}\"]);\n    return [b + \".slice().sort(\" + d + '(\"' + a + '\", ' + c + \"))\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.lists_split = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"INPUT\", $.Blockly.JavaScript.ORDER_MEMBER),\n        c = $.Blockly.JavaScript.valueToCode(a, \"DELIM\", $.Blockly.JavaScript.ORDER_NONE) || \"''\";\n    a = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" === a) b || (b = \"''\"), a = \"split\";else if (\"JOIN\" === a) b || (b = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n    return [b + \".\" + a + \"(\" + c + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.lists_reverse = function (a) {\n    return [($.Blockly.JavaScript.valueToCode(a, \"LIST\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL) || \"[]\") + \".slice().reverse()\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  var module$exports$Blockly$JavaScript$colour = {};\n\n  $.Blockly.JavaScript.colour_picker = function (a) {\n    return [$.Blockly.JavaScript.quote_(a.getFieldValue(\"COLOUR\")), $.Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  $.Blockly.JavaScript.colour_random = function (a) {\n    return [$.Blockly.JavaScript.provideFunction_(\"colourRandom\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"() {\", \"  var num = Math.floor(Math.random() * Math.pow(2, 24));\", \"  return '#' + ('00000' + num.toString(16)).substr(-6);\", \"}\"]) + \"()\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.colour_rgb = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"RED\", $.Blockly.JavaScript.ORDER_NONE) || 0,\n        c = $.Blockly.JavaScript.valueToCode(a, \"GREEN\", $.Blockly.JavaScript.ORDER_NONE) || 0;\n    a = $.Blockly.JavaScript.valueToCode(a, \"BLUE\", $.Blockly.JavaScript.ORDER_NONE) || 0;\n    return [$.Blockly.JavaScript.provideFunction_(\"colourRgb\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(r, g, b) {\", \"  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\", \"  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\", \"  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\", \"  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\", \"  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\", \"  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\", \"  return '#' + r + g + b;\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  $.Blockly.JavaScript.colour_blend = function (a) {\n    var b = $.Blockly.JavaScript.valueToCode(a, \"COLOUR1\", $.Blockly.JavaScript.ORDER_NONE) || \"'#000000'\",\n        c = $.Blockly.JavaScript.valueToCode(a, \"COLOUR2\", $.Blockly.JavaScript.ORDER_NONE) || \"'#000000'\";\n    a = $.Blockly.JavaScript.valueToCode(a, \"RATIO\", $.Blockly.JavaScript.ORDER_NONE) || .5;\n    return [$.Blockly.JavaScript.provideFunction_(\"colourBlend\", [\"function \" + $.Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(c1, c2, ratio) {\", \"  ratio = Math.max(Math.min(Number(ratio), 1), 0);\", \"  var r1 = parseInt(c1.substring(1, 3), 16);\", \"  var g1 = parseInt(c1.substring(3, 5), 16);\", \"  var b1 = parseInt(c1.substring(5, 7), 16);\", \"  var r2 = parseInt(c2.substring(1, 3), 16);\", \"  var g2 = parseInt(c2.substring(3, 5), 16);\", \"  var b2 = parseInt(c2.substring(5, 7), 16);\", \"  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\", \"  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\", \"  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\", \"  r = ('0' + (r || 0).toString(16)).slice(-2);\", \"  g = ('0' + (g || 0).toString(16)).slice(-2);\", \"  b = ('0' + (b || 0).toString(16)).slice(-2);\", \"  return '#' + r + g + b;\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", $.Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  var module$exports$Blockly$JavaScript$all = {};\n  return $.Blockly.JavaScript;\n});","map":{"version":3,"sources":["/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/variables.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/variables_dynamic.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/text.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/procedures.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/math.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/loops.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/logic.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/lists.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/colour.js","/Users/dhyeymavani/Documents/GitHub/r-blocks-lite/node_modules/blockly/generators/javascript/all.js"],"names":["JavaScript","Generator","addReservedWords","Object","getOwnPropertyNames","globalThis","ORDER_ATOMIC","ORDER_NEW","ORDER_MEMBER","ORDER_FUNCTION_CALL","ORDER_INCREMENT","ORDER_DECREMENT","ORDER_BITWISE_NOT","ORDER_UNARY_PLUS","ORDER_UNARY_NEGATION","ORDER_LOGICAL_NOT","ORDER_TYPEOF","ORDER_VOID","ORDER_DELETE","ORDER_AWAIT","ORDER_EXPONENTIATION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_MODULUS","ORDER_SUBTRACTION","ORDER_ADDITION","ORDER_BITWISE_SHIFT","ORDER_RELATIONAL","ORDER_IN","ORDER_INSTANCEOF","ORDER_EQUALITY","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_YIELD","ORDER_COMMA","ORDER_NONE","ORDER_OVERRIDES","isInitialized","init","JavaScript.init","getPrototypeOf","Names","nameDB_","workspace","getVariableMap","defvars","devVarList","i","length","push","NameType","variables","join","finish","JavaScript.finish","definitions","code","scrubNakedValue","JavaScript.scrubNakedValue","line","quote_","JavaScript.quote_","string","replace","multiline_quote_","JavaScript.multiline_quote_","split","scrub_","JavaScript.scrub_","commentCode","block","outputConnection","comment","getCommentText","inputList","inputTypes","childBlock","connection","nextBlock","nextConnection","nextCode","opt_thisOnly","getAdjusted","JavaScript.getAdjusted","delta","opt_delta","order","opt_order","options","defaultAtIndex","outerOrder","innerOrder","opt_negate","at","Number","Math","floor","exports","getFieldValue","argument0","strRegExp","forceString","test","getSubstringIndex","stringName","indexOf","itemCount_","element","codeAndOrder","element0","element1","elements","Array","varName","value","operator","substring","where","textOrder","text","Error","where1","where2","requiresLengthCall","match","at1","at2","wherePascalCase","functionName","OPERATORS","msg","getField","sub","from","to","funcName","xfix1","loopTrap","branch","returnValue","xfix2","args","getVars","hasReturnValue_","tuple","argument1","arg","CONSTANTS","number_to_check","dropdown_property","divisor","func","list","argument2","String","loopVar","endVar","repeats","until","variable0","increment","up","step","abs","startVar","incVar","INDENT","listVar","indexVar","xfix","loop","getSurroundLoop","suppressPrefixSuffix","n","conditionCode","branchCode","getInput","STATEMENT_SUFFIX","defaultArgument","value_if","value_then","value_else","repeatCount","item","mode","listOrder","cacheList","xVar","listName","direction","type","getCompareFunctionName","input","delimiter","red","green","blue","c1","c2","ratio"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @suppress {checkTypes|globalThis}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript');\ngoog.module.declareLegacyNamespace();\n\nconst Variables = goog.require('Blockly.Variables');\nconst objectUtils = goog.require('Blockly.utils.object');\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {Block} = goog.requireType('Blockly.Block');\nconst {Generator} = goog.require('Blockly.Generator');\nconst {globalThis} = goog.require('Blockly.utils.global');\nconst {inputTypes} = goog.require('Blockly.inputTypes');\nconst {Names, NameType} = goog.require('Blockly.Names');\nconst {Workspace} = goog.requireType('Blockly.Workspace');\n\n\n/**\n * JavaScript code generator.\n * @type {!Generator}\n */\nconst JavaScript = new Generator('JavaScript');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n */\nJavaScript.addReservedWords(\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n    'break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,' +\n    'enum,' +\n    'implements,interface,let,package,private,protected,public,static,' +\n    'await,' +\n    'null,true,false,' +\n    // Magic variable.\n    'arguments,' +\n    // Everything in the current environment (835 items in Chrome, 104 in Node).\n    Object.getOwnPropertyNames(globalThis).join(','));\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n */\nJavaScript.ORDER_ATOMIC = 0;            // 0 \"\" ...\nJavaScript.ORDER_NEW = 1.1;             // new\nJavaScript.ORDER_MEMBER = 1.2;          // . []\nJavaScript.ORDER_FUNCTION_CALL = 2;     // ()\nJavaScript.ORDER_INCREMENT = 3;         // ++\nJavaScript.ORDER_DECREMENT = 3;         // --\nJavaScript.ORDER_BITWISE_NOT = 4.1;     // ~\nJavaScript.ORDER_UNARY_PLUS = 4.2;      // +\nJavaScript.ORDER_UNARY_NEGATION = 4.3;  // -\nJavaScript.ORDER_LOGICAL_NOT = 4.4;     // !\nJavaScript.ORDER_TYPEOF = 4.5;          // typeof\nJavaScript.ORDER_VOID = 4.6;            // void\nJavaScript.ORDER_DELETE = 4.7;          // delete\nJavaScript.ORDER_AWAIT = 4.8;           // await\nJavaScript.ORDER_EXPONENTIATION = 5.0;  // **\nJavaScript.ORDER_MULTIPLICATION = 5.1;  // *\nJavaScript.ORDER_DIVISION = 5.2;        // /\nJavaScript.ORDER_MODULUS = 5.3;         // %\nJavaScript.ORDER_SUBTRACTION = 6.1;     // -\nJavaScript.ORDER_ADDITION = 6.2;        // +\nJavaScript.ORDER_BITWISE_SHIFT = 7;     // << >> >>>\nJavaScript.ORDER_RELATIONAL = 8;        // < <= > >=\nJavaScript.ORDER_IN = 8;                // in\nJavaScript.ORDER_INSTANCEOF = 8;        // instanceof\nJavaScript.ORDER_EQUALITY = 9;          // == != === !==\nJavaScript.ORDER_BITWISE_AND = 10;      // &\nJavaScript.ORDER_BITWISE_XOR = 11;      // ^\nJavaScript.ORDER_BITWISE_OR = 12;       // |\nJavaScript.ORDER_LOGICAL_AND = 13;      // &&\nJavaScript.ORDER_LOGICAL_OR = 14;       // ||\nJavaScript.ORDER_CONDITIONAL = 15;      // ?:\nJavaScript.ORDER_ASSIGNMENT = 16;       // = += -= **= *= /= %= <<= >>= ...\nJavaScript.ORDER_YIELD = 17;            // yield\nJavaScript.ORDER_COMMA = 18;            // ,\nJavaScript.ORDER_NONE = 99;             // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array<!Array<number>>}\n */\nJavaScript.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [JavaScript.ORDER_FUNCTION_CALL, JavaScript.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [JavaScript.ORDER_FUNCTION_CALL, JavaScript.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [JavaScript.ORDER_MEMBER, JavaScript.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [JavaScript.ORDER_MEMBER, JavaScript.ORDER_FUNCTION_CALL],\n\n  // !(!foo) -> !!foo\n  [JavaScript.ORDER_LOGICAL_NOT, JavaScript.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [JavaScript.ORDER_MULTIPLICATION, JavaScript.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [JavaScript.ORDER_ADDITION, JavaScript.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [JavaScript.ORDER_LOGICAL_AND, JavaScript.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [JavaScript.ORDER_LOGICAL_OR, JavaScript.ORDER_LOGICAL_OR]\n];\n\n/**\n * Whether the init method has been called.\n * @type {?boolean}\n */\nJavaScript.isInitialized = false;\n\n/**\n * Initialise the database of variable names.\n * @param {!Workspace} workspace Workspace to generate code from.\n */\nJavaScript.init = function(workspace) {\n  // Call Blockly.Generator's init.\n  Object.getPrototypeOf(this).init.call(this);\n\n  if (!this.nameDB_) {\n    this.nameDB_ = new Names(this.RESERVED_WORDS_);\n  } else {\n    this.nameDB_.reset();\n  }\n\n  this.nameDB_.setVariableMap(workspace.getVariableMap());\n  this.nameDB_.populateVariables(workspace);\n  this.nameDB_.populateProcedures(workspace);\n\n  const defvars = [];\n  // Add developer variables (not created or named by the user).\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    defvars.push(\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  const variables = Variables.allUsedVarModels(workspace);\n  for (let i = 0; i < variables.length; i++) {\n    defvars.push(this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n  }\n  this.isInitialized = true;\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nJavaScript.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  const definitions = objectUtils.values(this.definitions_);\n  // Call Blockly.Generator's finish.\n  code = Object.getPrototypeOf(this).finish.call(this, code);\n  this.isInitialized = false;\n\n  this.nameDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nJavaScript.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @protected\n */\nJavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n               .replace(/\\n/g, '\\\\\\n')\n               .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline JavaScript string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @protected\n */\nJavaScript.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  const lines = string.split(/\\n/g).map(this.quote_);\n  return lines.join(' + \\'\\\\n\\' +\\n');\n};\n\n/**\n * Common tasks for generating JavaScript from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Block} block The current block.\n * @param {string} code The JavaScript code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} JavaScript code with comments and subsequent blocks added.\n * @protected\n */\nJavaScript.scrub_ = function(block, code, opt_thisOnly) {\n  let commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    let comment = block.getCommentText();\n    if (comment) {\n      comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n      commentCode += this.prefixLines(comment + '\\n', '// ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (let i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type === inputTypes.VALUE) {\n        const childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = this.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += this.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nJavaScript.getAdjusted = function(\n    block, atId, opt_delta, opt_negate, opt_order) {\n  let delta = opt_delta || 0;\n  let order = opt_order || this.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n  let innerOrder;\n  let outerOrder = order;\n  if (delta > 0) {\n    outerOrder = this.ORDER_ADDITION;\n    innerOrder = this.ORDER_ADDITION;\n  } else if (delta < 0) {\n    outerOrder = this.ORDER_SUBTRACTION;\n    innerOrder = this.ORDER_SUBTRACTION;\n  } else if (opt_negate) {\n    outerOrder = this.ORDER_UNARY_NEGATION;\n    innerOrder = this.ORDER_UNARY_NEGATION;\n  }\n\n  let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n  if (stringUtils.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n\nexports = JavaScript;\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.variables');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\nconst {NameType} = goog.require('Blockly.Names');\n\n\nJavaScript['variables_get'] = function(block) {\n  // Variable getter.\n  const code = JavaScript.nameDB_.getName(block.getFieldValue('VAR'),\n      NameType.VARIABLE);\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  const argument0 = JavaScript.valueToCode(\n                        block, 'VALUE', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for dynamic variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.variablesDynamic');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\n/** @suppress {extraRequire} */\ngoog.require('Blockly.JavaScript.variables');\n\n\n// JavaScript is dynamically typed.\nJavaScript['variables_get_dynamic'] = JavaScript['variables_get'];\nJavaScript['variables_set_dynamic'] = JavaScript['variables_set'];\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for text blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.texts');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\nconst {NameType} = goog.require('Blockly.Names');\n\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, JavaScript.ORDER_ATOMIC];\n  }\n  return ['String(' + value + ')', JavaScript.ORDER_FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(stringName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nJavaScript['text'] = function(block) {\n  // Text value.\n  const code = JavaScript.quote_(block.getFieldValue('TEXT'));\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['text_multiline'] = function(block) {\n  // Text value.\n  const code = JavaScript.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? JavaScript.ORDER_ADDITION :\n      JavaScript.ORDER_ATOMIC;\n  return [code, order];\n};\n\nJavaScript['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return ['\\'\\'', JavaScript.ORDER_ATOMIC];\n    case 1: {\n      const element = JavaScript.valueToCode(block, 'ADD0',\n          JavaScript.ORDER_NONE) || '\\'\\'';\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = JavaScript.valueToCode(block, 'ADD0',\n          JavaScript.ORDER_NONE) || '\\'\\'';\n      const element1 = JavaScript.valueToCode(block, 'ADD1',\n          JavaScript.ORDER_NONE) || '\\'\\'';\n      const code = forceString(element0)[0] +\n          ' + ' + forceString(element1)[0];\n      return [code, JavaScript.ORDER_ADDITION];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] = JavaScript.valueToCode(block, 'ADD' + i,\n            JavaScript.ORDER_NONE) || '\\'\\'';\n      }\n      const code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n  }\n};\n\nJavaScript['text_append'] = function(block) {\n  // Append to a variable in place.\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  const code = varName + ' += ' +\n      forceString(value)[0] + ';\\n';\n  return code;\n};\n\nJavaScript['text_length'] = function(block) {\n  // String or array length.\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || '\\'\\'';\n  return [text + '.length', JavaScript.ORDER_MEMBER];\n};\n\nJavaScript['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || '\\'\\'';\n  return ['!' + text + '.length', JavaScript.ORDER_LOGICAL_NOT];\n};\n\nJavaScript['text_indexOf'] = function(block) {\n  // Search the text for a substring.\n  const operator = block.getFieldValue('END') === 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  const substring = JavaScript.valueToCode(block, 'FIND',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || '\\'\\'';\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', JavaScript.ORDER_ADDITION];\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? JavaScript.ORDER_NONE :\n      JavaScript.ORDER_MEMBER;\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      textOrder) || '\\'\\'';\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = JavaScript.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName = JavaScript.provideFunction_(\n          'textRandomLetter',\n          ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(text) {',\n           '  var x = Math.floor(Math.random() * text.length);',\n           '  return text[x];',\n           '}']);\n      const code = functionName + '(' + text + ')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nJavaScript['text_getSubstring'] = function(block) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where1 !== 'LAST' &&\n      where2 !== 'FROM_END' && where2 !== 'LAST');\n  const textOrder = requiresLengthCall ? JavaScript.ORDER_MEMBER :\n      JavaScript.ORDER_NONE;\n  const text = JavaScript.valueToCode(block, 'STRING',\n      textOrder) || '\\'\\'';\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, JavaScript.ORDER_NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = JavaScript.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = JavaScript.getAdjusted(block, 'AT1', 1, false,\n            JavaScript.ORDER_SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 0, false,\n            JavaScript.ORDER_SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = JavaScript.getAdjusted(block, 'AT1');\n    const at2 = JavaScript.getAdjusted(block, 'AT2');\n    const wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    const functionName = JavaScript.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], [\n          'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(sequence' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' :\n                                                                    '') +\n              ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' :\n                                                                    '') +\n              ') {',\n          '  var start = ' + getSubstringIndex('sequence', where1, 'at1') + ';',\n          '  var end = ' + getSubstringIndex('sequence', where2, 'at2') +\n              ' + 1;',\n          '  return sequence.slice(start, end);', '}'\n        ]);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_changeCase'] = function(block) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? JavaScript.ORDER_MEMBER :\n      JavaScript.ORDER_NONE;\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      textOrder) || '\\'\\'';\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into JavaScript.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName = JavaScript.provideFunction_(\n        'textToTitleCase',\n        ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n            '(str) {',\n         '  return str.replace(/\\\\S+/g,',\n         '      function(txt) {return txt[0].toUpperCase() + ' +\n            'txt.substring(1).toLowerCase();});',\n         '}']);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_trim'] = function(block) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()'\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_MEMBER) || '\\'\\'';\n  return [text + operator, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_print'] = function(block) {\n  // Print statement.\n  const msg = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  return 'window.alert(' + msg + ');\\n';\n};\n\nJavaScript['text_prompt_ext'] = function(block) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = JavaScript.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = JavaScript.valueToCode(block, 'TEXT',\n        JavaScript.ORDER_NONE) || '\\'\\'';\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_prompt'] = JavaScript['text_prompt_ext'];\n\nJavaScript['text_count'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  const sub = JavaScript.valueToCode(block, 'SUB',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  const functionName = JavaScript.provideFunction_(\n      'textCount',\n      ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n          '(haystack, needle) {',\n       '  if (needle.length === 0) {',\n       '    return haystack.length + 1;',\n       '  } else {',\n       '    return haystack.split(needle).length - 1;',\n       '  }',\n       '}']);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_replace'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  const from = JavaScript.valueToCode(block, 'FROM',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  const to = JavaScript.valueToCode(block, 'TO',\n      JavaScript.ORDER_NONE) || '\\'\\'';\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = JavaScript.provideFunction_(\n      'textReplace',\n      ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n          '(haystack, needle, replacement) {',\n       '  needle = ' +\n           'needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g,\"\\\\\\\\$1\")',\n       '                 .replace(/\\\\x08/g,\"\\\\\\\\x08\");',\n       '  return haystack.replace(new RegExp(needle, \\'g\\'), replacement);',\n       '}']);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_reverse'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_MEMBER) || '\\'\\'';\n  const code = text + '.split(\\'\\').reverse().join(\\'\\')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.procedures');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\nconst {NameType} = goog.require('Blockly.Names');\n\n\nJavaScript['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  const funcName = JavaScript.nameDB_.getName(\n      block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    xfix1 += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  if (JavaScript.STATEMENT_SUFFIX) {\n    xfix1 += JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = JavaScript.prefixLines(xfix1, JavaScript.INDENT);\n  }\n  let loopTrap = '';\n  if (JavaScript.INFINITE_LOOP_TRAP) {\n    loopTrap = JavaScript.prefixLines(\n        JavaScript.injectId(JavaScript.INFINITE_LOOP_TRAP, block),\n        JavaScript.INDENT);\n  }\n  const branch = JavaScript.statementToCode(block, 'STACK');\n  let returnValue =\n      JavaScript.valueToCode(block, 'RETURN', JavaScript.ORDER_NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = JavaScript.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = JavaScript.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + '}';\n  code = JavaScript.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  JavaScript.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nJavaScript['procedures_defnoreturn'] = JavaScript['procedures_defreturn'];\n\nJavaScript['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  const funcName = JavaScript.nameDB_.getName(\n      block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = JavaScript.valueToCode(block, 'ARG' + i, JavaScript.ORDER_NONE) ||\n        'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = JavaScript['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nJavaScript['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  const condition =\n      JavaScript.valueToCode(block, 'CONDITION', JavaScript.ORDER_NONE) ||\n      'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += JavaScript.prefixLines(\n        JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n        JavaScript.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_NONE) || 'null';\n    code += JavaScript.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += JavaScript.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @suppress {missingRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.math');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\nconst {NameType} = goog.require('Blockly.Names');\n\n\nJavaScript['math_number'] = function(block) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? JavaScript.ORDER_ATOMIC :\n              JavaScript.ORDER_UNARY_NEGATION;\n  return [code, order];\n};\n\nJavaScript['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', JavaScript.ORDER_ADDITION],\n    'MINUS': [' - ', JavaScript.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', JavaScript.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', JavaScript.ORDER_DIVISION],\n    'POWER': [null, JavaScript.ORDER_NONE]  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = JavaScript.valueToCode(block, 'A', order) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nJavaScript['math_single'] = function(block) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, JavaScript.ORDER_UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_DIVISION) || '0';\n  } else {\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, JavaScript.ORDER_DIVISION];\n};\n\nJavaScript['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.PI', JavaScript.ORDER_MEMBER],\n    'E': ['Math.E', JavaScript.ORDER_MEMBER],\n    'GOLDEN_RATIO':\n        ['(1 + Math.sqrt(5)) / 2', JavaScript.ORDER_DIVISION],\n    'SQRT2': ['Math.SQRT2', JavaScript.ORDER_MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', JavaScript.ORDER_MEMBER],\n    'INFINITY': ['Infinity', JavaScript.ORDER_ATOMIC]\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nJavaScript['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const number_to_check = JavaScript.valueToCode(block, 'NUMBER_TO_CHECK',\n      JavaScript.ORDER_MODULUS) || '0';\n  const dropdown_property = block.getFieldValue('PROPERTY');\n  let code;\n  if (dropdown_property === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = JavaScript.provideFunction_(\n        'mathIsPrime',\n        ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',\n         '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  if (n == 2 || n == 3) {',\n         '    return true;',\n         '  }',\n         '  // False if n is NaN, negative, is 1, or not whole.',\n         '  // And false if n is divisible by 2 or 3.',\n         '  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 ||' +\n            ' n % 3 === 0) {',\n         '    return false;',\n         '  }',\n         '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {',\n         '    if (n % (x - 1) === 0 || n % (x + 1) === 0) {',\n         '      return false;',\n         '    }',\n         '  }',\n         '  return true;',\n         '}']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 === 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 === 1';\n      break;\n    case 'WHOLE':\n      code = number_to_check + ' % 1 === 0';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY': {\n      const divisor = JavaScript.valueToCode(block, 'DIVISOR',\n          JavaScript.ORDER_MODULUS) || '0';\n      code = number_to_check + ' % ' + divisor + ' === 0';\n      break;\n    }\n  }\n  return [code, JavaScript.ORDER_EQUALITY];\n};\n\nJavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  const argument0 = JavaScript.valueToCode(block, 'DELTA',\n      JavaScript.ORDER_ADDITION) || '0';\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = (typeof ' + varName + ' === \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nJavaScript['math_round'] = JavaScript['math_single'];\n// Trigonometry functions have a single operand.\nJavaScript['math_trig'] = JavaScript['math_single'];\n\nJavaScript['math_on_list'] = function(block) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;})';\n      break;\n    case 'MIN':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = JavaScript.provideFunction_(\n          'mathMean',\n          ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  return myList.reduce(function(x, y) {return x + y;}) / ' +\n                  'myList.length;',\n            '}']);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = JavaScript.provideFunction_(\n          'mathMedian',\n          ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  var localList = myList.filter(function (x) ' +\n              '{return typeof x === \\'number\\';});',\n            '  if (!localList.length) return null;',\n            '  localList.sort(function(a, b) {return b - a;});',\n            '  if (localList.length % 2 === 0) {',\n            '    return (localList[localList.length / 2 - 1] + ' +\n              'localList[localList.length / 2]) / 2;',\n            '  } else {',\n            '    return localList[(localList.length - 1) / 2];',\n            '  }',\n            '}']);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = JavaScript.provideFunction_(\n          'mathModes',\n          ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(values) {',\n            '  var modes = [];',\n            '  var counts = [];',\n            '  var maxCount = 0;',\n            '  for (var i = 0; i < values.length; i++) {',\n            '    var value = values[i];',\n            '    var found = false;',\n            '    var thisCount;',\n            '    for (var j = 0; j < counts.length; j++) {',\n            '      if (counts[j][0] === value) {',\n            '        thisCount = ++counts[j][1];',\n            '        found = true;',\n            '        break;',\n            '      }',\n            '    }',\n            '    if (!found) {',\n            '      counts.push([value, 1]);',\n            '      thisCount = 1;',\n            '    }',\n            '    maxCount = Math.max(thisCount, maxCount);',\n            '  }',\n            '  for (var j = 0; j < counts.length; j++) {',\n            '    if (counts[j][1] === maxCount) {',\n            '        modes.push(counts[j][0]);',\n            '    }',\n            '  }',\n            '  return modes;',\n            '}']);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName = JavaScript.provideFunction_(\n          'mathStandardDeviation',\n          ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(numbers) {',\n            '  var n = numbers.length;',\n            '  if (!n) return null;',\n            '  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;',\n            '  var variance = 0;',\n            '  for (var j = 0; j < n; j++) {',\n            '    variance += Math.pow(numbers[j] - mean, 2);',\n            '  }',\n            '  variance = variance / n;',\n            '  return Math.sqrt(variance);',\n            '}']);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = JavaScript.provideFunction_(\n          'mathRandomList',\n          ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(list) {',\n            '  var x = Math.floor(Math.random() * list.length);',\n            '  return list[x];',\n            '}']);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_modulo'] = function(block) {\n  // Remainder computation.\n  const argument0 = JavaScript.valueToCode(block, 'DIVIDEND',\n      JavaScript.ORDER_MODULUS) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'DIVISOR',\n      JavaScript.ORDER_MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, JavaScript.ORDER_MODULUS];\n};\n\nJavaScript['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  const argument0 = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'LOW',\n      JavaScript.ORDER_NONE) || '0';\n  const argument2 = JavaScript.valueToCode(block, 'HIGH',\n      JavaScript.ORDER_NONE) || 'Infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  const argument0 = JavaScript.valueToCode(block, 'FROM',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'TO',\n      JavaScript.ORDER_NONE) || '0';\n  const functionName = JavaScript.provideFunction_(\n      'mathRandomInt',\n      ['function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n          '(a, b) {',\n       '  if (a > b) {',\n       '    // Swap a and b to ensure a is smaller.',\n       '    var c = a;',\n       '    a = b;',\n       '    b = c;',\n       '  }',\n       '  return Math.floor(Math.random() * (b - a + 1) + a);',\n       '}']);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = JavaScript.valueToCode(block, 'X',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'Y',\n      JavaScript.ORDER_NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      JavaScript.ORDER_DIVISION];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.loops');\n\nconst stringUtils = goog.require('Blockly.utils.string');\nconst JavaScript = goog.require('Blockly.JavaScript');\nconst {NameType} = goog.require('Blockly.Names');\n\n\nJavaScript['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        JavaScript.valueToCode(block, 'TIMES', JavaScript.ORDER_ASSIGNMENT) ||\n        '0';\n  }\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      JavaScript.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        JavaScript.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nJavaScript['controls_repeat'] = JavaScript['controls_repeat_ext'];\n\nJavaScript['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      JavaScript.valueToCode(\n          block, 'BOOL',\n          until ? JavaScript.ORDER_LOGICAL_NOT : JavaScript.ORDER_NONE) ||\n      'false';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nJavaScript['controls_for'] = function(block) {\n  // For loop.\n  const variable0 =\n      JavaScript.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      JavaScript.valueToCode(block, 'FROM', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const argument1 =\n      JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const increment =\n      JavaScript.valueToCode(block, 'BY', JavaScript.ORDER_ASSIGNMENT) || '1';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = JavaScript.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = JavaScript.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = JavaScript.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nJavaScript['controls_forEach'] = function(block) {\n  // For each loop.\n  const variable0 =\n      JavaScript.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_ASSIGNMENT) ||\n      '[]';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = JavaScript.nameDB_.getDistinctName(\n        variable0 + '_list', NameType.VARIABLE);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = JavaScript.nameDB_.getDistinctName(\n      variable0 + '_index', NameType.VARIABLE);\n  branch = JavaScript.INDENT + variable0 + ' = ' + listVar + '[' + indexVar +\n      '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nJavaScript['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  if (JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block);\n  }\n  if (JavaScript.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for logic blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.logic');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\n\n\nJavaScript['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        JavaScript.valueToCode(block, 'IF' + n, JavaScript.ORDER_NONE) ||\n        'false';\n    let branchCode = JavaScript.statementToCode(block, 'DO' + n);\n    if (JavaScript.STATEMENT_SUFFIX) {\n      branchCode = JavaScript.prefixLines(\n                       JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n                       JavaScript.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || JavaScript.STATEMENT_SUFFIX) {\n    let branchCode = JavaScript.statementToCode(block, 'ELSE');\n    if (JavaScript.STATEMENT_SUFFIX) {\n      branchCode = JavaScript.prefixLines(\n                       JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n                       JavaScript.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nJavaScript['controls_ifelse'] = JavaScript['controls_if'];\n\nJavaScript['logic_compare'] = function(block) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      JavaScript.ORDER_EQUALITY :\n      JavaScript.ORDER_RELATIONAL;\n  const argument0 = JavaScript.valueToCode(block, 'A', order) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nJavaScript['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order = (operator === '&&') ? JavaScript.ORDER_LOGICAL_AND :\n                                      JavaScript.ORDER_LOGICAL_OR;\n  let argument0 = JavaScript.valueToCode(block, 'A', order);\n  let argument1 = JavaScript.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nJavaScript['logic_negate'] = function(block) {\n  // Negation.\n  const order = JavaScript.ORDER_LOGICAL_NOT;\n  const argument0 = JavaScript.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nJavaScript['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['logic_null'] = function(block) {\n  // Null data type.\n  return ['null', JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['logic_ternary'] = function(block) {\n  // Ternary operator.\n  const value_if =\n      JavaScript.valueToCode(block, 'IF', JavaScript.ORDER_CONDITIONAL) ||\n      'false';\n  const value_then =\n      JavaScript.valueToCode(block, 'THEN', JavaScript.ORDER_CONDITIONAL) ||\n      'null';\n  const value_else =\n      JavaScript.valueToCode(block, 'ELSE', JavaScript.ORDER_CONDITIONAL) ||\n      'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, JavaScript.ORDER_CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for list blocks.\n * @suppress {missingRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.lists');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\nconst {NameType} = goog.require('Blockly.Names');\n\n\nJavaScript['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['[]', JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        JavaScript.valueToCode(block, 'ADD' + i, JavaScript.ORDER_NONE) ||\n        'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  const functionName = JavaScript.provideFunction_('listsRepeat', [\n    'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(value, n) {',\n    '  var array = [];', '  for (var i = 0; i < n; i++) {',\n    '    array[i] = value;', '  }', '  return array;', '}'\n  ]);\n  const element =\n      JavaScript.valueToCode(block, 'ITEM', JavaScript.ORDER_NONE) || 'null';\n  const repeatCount =\n      JavaScript.valueToCode(block, 'NUM', JavaScript.ORDER_NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_length'] = function(block) {\n  // String or array length.\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  return [list + '.length', JavaScript.ORDER_MEMBER];\n};\n\nJavaScript['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  return ['!' + list + '.length', JavaScript.ORDER_LOGICAL_NOT];\n};\n\nJavaScript['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item =\n      JavaScript.valueToCode(block, 'FIND', JavaScript.ORDER_NONE) || '\\'\\'';\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', JavaScript.ORDER_ADDITION];\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? JavaScript.ORDER_NONE : JavaScript.ORDER_MEMBER;\n  const list = JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = JavaScript.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      const functionName = JavaScript.provideFunction_('listsGetRandomItem', [\n        'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n            '(list, remove) {',\n        '  var x = Math.floor(Math.random() * list.length);', '  if (remove) {',\n        '    return list.splice(x, 1)[0];', '  } else {', '    return list[x];',\n        '  }', '}'\n      ]);\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nJavaScript['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_ASSIGNMENT) ||\n      'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        JavaScript.nameDB_.getDistinctName('tmpList', NameType.VARIABLE);\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = JavaScript.getAdjusted(\n          block, 'AT', 1, false, JavaScript.ORDER_SUBTRACTION);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      let code = cacheList();\n      const xVar =\n          JavaScript.nameDB_.getDistinctName('tmpX', NameType.VARIABLE);\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nJavaScript['lists_getSublist'] = function(block) {\n  // Get sublist.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n      list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = JavaScript.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = JavaScript.getAdjusted(\n            block, 'AT1', 1, false, JavaScript.ORDER_SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = JavaScript.getAdjusted(\n            block, 'AT2', 0, false, JavaScript.ORDER_SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = JavaScript.getAdjusted(block, 'AT1');\n    const at2 = JavaScript.getAdjusted(block, 'AT2');\n    const wherePascalCase = {\n      'FIRST': 'First',\n      'LAST': 'Last',\n      'FROM_START': 'FromStart',\n      'FROM_END': 'FromEnd'\n    };\n    const functionName = JavaScript.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], [\n          'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(sequence' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' :\n                                                                    '') +\n              ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' :\n                                                                    '') +\n              ') {',\n          getSubstringIndex('sequence', where1, 'at1') + ';',\n          '  var end = ' + getSubstringIndex('sequence', where2, 'at2') +\n              ' + 1;',\n          '  return sequence.slice(start, end);', '}'\n        ]);\n    code = functionName + '(' + list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_FUNCTION_CALL) ||\n      '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName =\n      JavaScript.provideFunction_('listsGetSortCompare', [\n        'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n            '(type, direction) {',\n        '  var compareFuncs = {', '    \"NUMERIC\": function(a, b) {',\n        '        return Number(a) - Number(b); },',\n        '    \"TEXT\": function(a, b) {',\n        '        return a.toString() > b.toString() ? 1 : -1; },',\n        '    \"IGNORE_CASE\": function(a, b) {',\n        '        return a.toString().toLowerCase() > ' +\n            'b.toString().toLowerCase() ? 1 : -1; },',\n        '  };', '  var compare = compareFuncs[type];',\n        '  return function(a, b) { return compare(a, b) * direction; }', '}'\n      ]);\n  return [\n    list + '.slice().sort(' + getCompareFunctionName + '(\"' + type + '\", ' +\n        direction + '))',\n    JavaScript.ORDER_FUNCTION_CALL\n  ];\n};\n\nJavaScript['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = JavaScript.valueToCode(block, 'INPUT', JavaScript.ORDER_MEMBER);\n  const delimiter =\n      JavaScript.valueToCode(block, 'DELIM', JavaScript.ORDER_NONE) || '\\'\\'';\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = '\\'\\'';\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_FUNCTION_CALL) ||\n      '[]';\n  const code = list + '.slice().reverse()';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for colour blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.colour');\n\nconst JavaScript = goog.require('Blockly.JavaScript');\n\n\nJavaScript['colour_picker'] = function(block) {\n  // Colour picker.\n  const code = JavaScript.quote_(block.getFieldValue('COLOUR'));\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['colour_random'] = function(block) {\n  // Generate a random colour.\n  const functionName = JavaScript.provideFunction_('colourRandom', [\n    'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '() {',\n    '  var num = Math.floor(Math.random() * Math.pow(2, 24));',\n    '  return \\'#\\' + (\\'00000\\' + num.toString(16)).substr(-6);', '}'\n  ]);\n  const code = functionName + '()';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = JavaScript.valueToCode(block, 'RED', JavaScript.ORDER_NONE) || 0;\n  const green =\n      JavaScript.valueToCode(block, 'GREEN', JavaScript.ORDER_NONE) || 0;\n  const blue =\n      JavaScript.valueToCode(block, 'BLUE', JavaScript.ORDER_NONE) || 0;\n  const functionName = JavaScript.provideFunction_('colourRgb', [\n    'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(r, g, b) {',\n    '  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;',\n    '  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;',\n    '  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;',\n    '  r = (\\'0\\' + (Math.round(r) || 0).toString(16)).slice(-2);',\n    '  g = (\\'0\\' + (Math.round(g) || 0).toString(16)).slice(-2);',\n    '  b = (\\'0\\' + (Math.round(b) || 0).toString(16)).slice(-2);',\n    '  return \\'#\\' + r + g + b;', '}'\n  ]);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['colour_blend'] = function(block) {\n  // Blend two colours together.\n  const c1 = JavaScript.valueToCode(block, 'COLOUR1', JavaScript.ORDER_NONE) ||\n      '\\'#000000\\'';\n  const c2 = JavaScript.valueToCode(block, 'COLOUR2', JavaScript.ORDER_NONE) ||\n      '\\'#000000\\'';\n  const ratio =\n      JavaScript.valueToCode(block, 'RATIO', JavaScript.ORDER_NONE) || 0.5;\n  const functionName = JavaScript.provideFunction_('colourBlend', [\n    'function ' + JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(c1, c2, ratio) {',\n    '  ratio = Math.max(Math.min(Number(ratio), 1), 0);',\n    '  var r1 = parseInt(c1.substring(1, 3), 16);',\n    '  var g1 = parseInt(c1.substring(3, 5), 16);',\n    '  var b1 = parseInt(c1.substring(5, 7), 16);',\n    '  var r2 = parseInt(c2.substring(1, 3), 16);',\n    '  var g2 = parseInt(c2.substring(3, 5), 16);',\n    '  var b2 = parseInt(c2.substring(5, 7), 16);',\n    '  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);',\n    '  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);',\n    '  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);',\n    '  r = (\\'0\\' + (r || 0).toString(16)).slice(-2);',\n    '  g = (\\'0\\' + (g || 0).toString(16)).slice(-2);',\n    '  b = (\\'0\\' + (b || 0).toString(16)).slice(-2);',\n    '  return \\'#\\' + r + g + b;', '}'\n  ]);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating JavaScript for\n *     blocks.  This is the entrypoint for javascript_compressed.js.\n * @suppress {extraRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.all');\n\ngoog.require('Blockly.JavaScript.colour');\ngoog.require('Blockly.JavaScript.lists');\ngoog.require('Blockly.JavaScript.logic');\ngoog.require('Blockly.JavaScript.loops');\ngoog.require('Blockly.JavaScript.math');\ngoog.require('Blockly.JavaScript.procedures');\ngoog.require('Blockly.JavaScript.texts');\ngoog.require('Blockly.JavaScript.variables');\ngoog.require('Blockly.JavaScript.variablesDynamic');\n\n"]},"metadata":{},"sourceType":"script"}