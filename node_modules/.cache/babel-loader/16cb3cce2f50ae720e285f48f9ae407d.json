{"ast":null,"code":"import Blockly from'blockly';import'blockly/javascript';Blockly.Blocks['new_boundary_function']={init:function init(){this.appendDummyInput().appendField(new Blockly.FieldTextInput(\"Boundary Function Name\"),\"Name\");this.appendStatementInput(\"Content\").setCheck(null);this.setInputsInline(true);this.setColour(315);this.setTooltip(\"\");this.setHelpUrl(\"\");}};Blockly.JavaScript['new_boundary_function']=function(block){var text_name=block.getFieldValue('Name');var statements_content=Blockly.JavaScript.statementToCode(block,'Content');// TODO: Assemble JavaScript into code variable.\nvar code='def '+text_name+'(_object,**kwargs):\\n'+statements_content+'\\n';return code;};Blockly.Blocks['return']={init:function init(){this.appendValueInput(\"NAME\").setCheck(null).appendField(\"return\");this.setInputsInline(false);this.setPreviousStatement(true,null);this.setColour(330);this.setTooltip(\"\");this.setHelpUrl(\"\");}};Blockly.JavaScript['return']=function(block){var value_name=Blockly.JavaScript.valueToCode(block,'NAME',Blockly.JavaScript.ORDER_ATOMIC);// TODO: Assemble JavaScript into code variable.\nvar code='return '+value_name+'\\n';return code;};Blockly.Blocks['library']={init:function init(){this.appendValueInput(\"NAME\").setCheck(null).appendField(\"library:\").appendField(new Blockly.FieldTextInput(\"\"),\"library\");this.setColour(200);this.setInputsInline(false);this.setNextStatement(true,null);this.setTooltip(\"\");this.setHelpUrl(\"\");}};Blockly.JavaScript['library']=function(block){var value_name=Blockly.JavaScript.valueToCode(block,'NAME',Blockly.JavaScript.ORDER_ATOMIC);// TODO: Assemble JavaScript into code variable.\nvar code='return '+value_name+'\\n';return code;};","map":{"version":3,"sources":["/Users/dhyeymavani/Documents/GitHub/r-blocks/src/pages/modules/blockly/blocks.js"],"names":["Blockly","Blocks","init","appendDummyInput","appendField","FieldTextInput","appendStatementInput","setCheck","setInputsInline","setColour","setTooltip","setHelpUrl","JavaScript","block","text_name","getFieldValue","statements_content","statementToCode","code","appendValueInput","setPreviousStatement","value_name","valueToCode","ORDER_ATOMIC","setNextStatement"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CACA,MAAO,oBAAP,CAEAA,OAAO,CAACC,MAAR,CAAe,uBAAf,EAA0C,CACtCC,IAAI,CAAE,eAAY,CACd,KAAKC,gBAAL,GACKC,WADL,CACiB,GAAIJ,CAAAA,OAAO,CAACK,cAAZ,CAA2B,wBAA3B,CADjB,CACuE,MADvE,EAEA,KAAKC,oBAAL,CAA0B,SAA1B,EACKC,QADL,CACc,IADd,EAEA,KAAKC,eAAL,CAAqB,IAArB,EACA,KAAKC,SAAL,CAAe,GAAf,EACA,KAAKC,UAAL,CAAgB,EAAhB,EACA,KAAKC,UAAL,CAAgB,EAAhB,EACH,CAVqC,CAA1C,CAaAX,OAAO,CAACY,UAAR,CAAmB,uBAAnB,EAA8C,SAAUC,KAAV,CAAiB,CAC3D,GAAIC,CAAAA,SAAS,CAAGD,KAAK,CAACE,aAAN,CAAoB,MAApB,CAAhB,CACA,GAAIC,CAAAA,kBAAkB,CAAGhB,OAAO,CAACY,UAAR,CAAmBK,eAAnB,CAAmCJ,KAAnC,CAA0C,SAA1C,CAAzB,CACA;AACA,GAAIK,CAAAA,IAAI,CAAG,OAASJ,SAAT,CAAqB,uBAArB,CAA+CE,kBAA/C,CAAoE,IAA/E,CACA,MAAOE,CAAAA,IAAP,CACH,CAND,CAQAlB,OAAO,CAACC,MAAR,CAAe,QAAf,EAA2B,CACvBC,IAAI,CAAE,eAAY,CACd,KAAKiB,gBAAL,CAAsB,MAAtB,EACKZ,QADL,CACc,IADd,EAEKH,WAFL,CAEiB,QAFjB,EAGA,KAAKI,eAAL,CAAqB,KAArB,EACA,KAAKY,oBAAL,CAA0B,IAA1B,CAAgC,IAAhC,EACA,KAAKX,SAAL,CAAe,GAAf,EACA,KAAKC,UAAL,CAAgB,EAAhB,EACA,KAAKC,UAAL,CAAgB,EAAhB,EACH,CAVsB,CAA3B,CAaAX,OAAO,CAACY,UAAR,CAAmB,QAAnB,EAA+B,SAAUC,KAAV,CAAiB,CAC5C,GAAIQ,CAAAA,UAAU,CAAGrB,OAAO,CAACY,UAAR,CAAmBU,WAAnB,CAA+BT,KAA/B,CAAsC,MAAtC,CAA8Cb,OAAO,CAACY,UAAR,CAAmBW,YAAjE,CAAjB,CACA;AACA,GAAIL,CAAAA,IAAI,CAAG,UAAYG,UAAZ,CAAyB,IAApC,CACA,MAAOH,CAAAA,IAAP,CACH,CALD,CAQAlB,OAAO,CAACC,MAAR,CAAe,SAAf,EAA4B,CACxBC,IAAI,CAAE,eAAW,CACb,KAAKiB,gBAAL,CAAsB,MAAtB,EAA8BZ,QAA9B,CAAuC,IAAvC,EAA6CH,WAA7C,CAAyD,UAAzD,EAAqEA,WAArE,CAAiF,GAAIJ,CAAAA,OAAO,CAACK,cAAZ,CAA2B,EAA3B,CAAjF,CAAiH,SAAjH,EACA,KAAKI,SAAL,CAAe,GAAf,EACA,KAAKD,eAAL,CAAqB,KAArB,EACA,KAAKgB,gBAAL,CAAsB,IAAtB,CAA4B,IAA5B,EACA,KAAKd,UAAL,CAAgB,EAAhB,EACA,KAAKC,UAAL,CAAgB,EAAhB,EACH,CARuB,CAA5B,CAWAX,OAAO,CAACY,UAAR,CAAmB,SAAnB,EAAgC,SAAUC,KAAV,CAAiB,CAC7C,GAAIQ,CAAAA,UAAU,CAAGrB,OAAO,CAACY,UAAR,CAAmBU,WAAnB,CAA+BT,KAA/B,CAAsC,MAAtC,CAA8Cb,OAAO,CAACY,UAAR,CAAmBW,YAAjE,CAAjB,CACA;AACA,GAAIL,CAAAA,IAAI,CAAG,UAAYG,UAAZ,CAAyB,IAApC,CACA,MAAOH,CAAAA,IAAP,CACH,CALD","sourcesContent":["import Blockly from 'blockly';\nimport 'blockly/javascript';\n\nBlockly.Blocks['new_boundary_function'] = {\n    init: function () {\n        this.appendDummyInput()\n            .appendField(new Blockly.FieldTextInput(\"Boundary Function Name\"), \"Name\");\n        this.appendStatementInput(\"Content\")\n            .setCheck(null);\n        this.setInputsInline(true);\n        this.setColour(315);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.JavaScript['new_boundary_function'] = function (block) {\n    var text_name = block.getFieldValue('Name');\n    var statements_content = Blockly.JavaScript.statementToCode(block, 'Content');\n    // TODO: Assemble JavaScript into code variable.\n    var code = 'def ' + text_name + '(_object,**kwargs):\\n' + statements_content + '\\n';\n    return code;\n};\n\nBlockly.Blocks['return'] = {\n    init: function () {\n        this.appendValueInput(\"NAME\")\n            .setCheck(null)\n            .appendField(\"return\");\n        this.setInputsInline(false);\n        this.setPreviousStatement(true, null);\n        this.setColour(330);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.JavaScript['return'] = function (block) {\n    var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);\n    // TODO: Assemble JavaScript into code variable.\n    var code = 'return ' + value_name + '\\n';\n    return code;\n};\n\n\nBlockly.Blocks['library'] = {\n    init: function() {\n        this.appendValueInput(\"NAME\").setCheck(null).appendField(\"library:\").appendField(new Blockly.FieldTextInput(\"\"), \"library\");\n        this.setColour(200);\n        this.setInputsInline(false);\n        this.setNextStatement(true, null);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.JavaScript['library'] = function (block) {\n    var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);\n    // TODO: Assemble JavaScript into code variable.\n    var code = 'return ' + value_name + '\\n';\n    return code;\n};"]},"metadata":{},"sourceType":"module"}